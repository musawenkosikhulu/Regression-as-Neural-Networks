# -*- coding: utf-8 -*-
"""musawenkosi - Tensorflow Multivariate Practical3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i-6hu3MdyNlaO6CAkM23f5MtCHwyxHja

## Regression as Neural Networks Practical
"""

import numpy as np
np.random.seed(1348) # for reproducibility
import pandas
import tensorflow as tf
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras import metrics
from tensorflow.keras.wrappers.scikit_learn import KerasRegressor
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

dataframe = pandas.read_csv("https://raw.githubusercontent.com/eijaz1/Deep-Learning-in-Keras-Tutorial/master/data/hourly_wages_data.csv")
dataset = dataframe.values

dataframe.head()

X = dataframe.drop(columns=['wage_per_hour']).values
Y = dataframe['wage_per_hour'].values

X.shape #This code checks the shape of the data we have.

Y.shape #This code checks the shape of the features.

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=.3) #This splits the data into training and testing.

"""###***Create a neural network model***"""

# define the model
def NueralNetwork():
    # create model
    model = Sequential()
    
    # add one fully connected layer
    model.add(Dense(units = 8, input_dim=9, activation='relu'))
    
    # add a fully connected layer for the output
    model.add(Dense(units=1))
    
    # Compile model
    model.compile(loss='mse', optimizer='adam',metrics=[metrics.mse])
    
    return model

model = NueralNetwork() #This loads the model.

"""###***Determine the number of trainable parameters***"""

model.summary() #This code gives the summary

"""### ***Split the data into training and test data***



"""

history = model.fit(X_train, Y_train, epochs=24, batch_size=4, verbose=1)

"""### **Predict on the test data**"""

prediction = model.predict(X_test)

"""### **Compute the mean squared error**

"""

mean_squared_error(Y_test, prediction)

"""###***Plot the error over the epochs***"""

plt.figure(figsize=(8, 8))
plt.plot(history.history['mean_squared_error'])
plt.title('Model loss')
plt.ylabel('Mean Squared Error')
plt.xlabel('Epoch')
plt.show()

"""1) How many inputs would a neural network have if we tried to solve this problem? \\
##**534**

2) How many outputs would the neural network have?
###***8***

3) What is the goal here? What are we trying to achieve with machine learning?
###**Is to predict the pay**
"""